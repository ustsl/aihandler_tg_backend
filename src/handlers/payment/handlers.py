from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
)

from src.api.payment import put_user_subscribe
from src.keyboards.main_kb import MainCallback, payment_keyboard, reverse_kb as kb
from src.settings import STARS_PRICE, SUBSCRIPTION_PRICE

# –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏: –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
# from src.settings import TELEGRAM_PROVIDER_TOKEN as PROVIDER_TOKEN

router = Router()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–Ω–≤–æ–π—Å–∞ ---
TITLE = "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ 100 STARS"
DESCRIPTION = "–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É"
CURRENCY = "XTR"
PAYLOAD = "channel_support"
PROVIDER_TOKEN = ""  # –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –±–æ–µ–≤–æ–π —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ –ø—Ä–æ–¥–µ


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def _prices() -> list[LabeledPrice]:
    # –í Stars amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã XTR).
    return [LabeledPrice(label="XTR", amount=SUBSCRIPTION_PRICE)]


async def _send_invoice(msg: Message) -> None:
    await msg.answer_invoice(
        title=TITLE,
        description=DESCRIPTION,
        prices=_prices(),
        provider_token=PROVIDER_TOKEN,
        payload=PAYLOAD,
        currency=CURRENCY,
        reply_markup=payment_keyboard(),
    )


def _format_stars(balance_raw: float | int) -> str:
    # –ë–∞–ª–∞–Ω—Å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ "–¥–µ–Ω–µ–∂–Ω—ã—Ö" –µ–¥–∏–Ω–∏—Ü–∞—Ö; –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ ‚≠ê
    stars = float(balance_raw) / STARS_PRICE
    # –û–±—ã—á–Ω–æ —É–¥–æ–±–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 2 –∑–Ω–∞–∫–∞
    return f"{stars:.2f}"


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@router.message(Command(commands=["payment"]))
async def payment_by_command(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /payment."""
    await _send_invoice(message)


@router.callback_query(MainCallback.filter(F.action == "payment"))
async def payment_by_callback(query: CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏."""
    if query.message:  # safety-guard
        await _send_invoice(query.message)


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery) -> None:
    """–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π."""
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def success_payment_handler(message: Message) -> None:
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ Telegram –ø—Ä–∏—Å–ª–∞–ª message.successful_payment.
    –ù–∞—á–∏—Å–ª—è–µ–º ‚≠ê –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ù–∞—á–∏—Å–ª—è–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 100 ‚≠ê –≤ –≤–∞—à–µ–π –≤–∞–ª—é—Ç–µ
    result = await put_user_subscribe(message.from_user.id, 100 * STARS_PRICE)

    if isinstance(result, dict) and result.get("status"):
        balance = result.get("balance")
        stars_text = _format_stars(balance)
        msg = (
            "<b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b> ü§ó\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ‚≠êÔ∏è {stars_text}"
        )
        await message.answer(msg, reply_markup=kb)
